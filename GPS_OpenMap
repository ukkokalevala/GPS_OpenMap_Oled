#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>
#include <SoftwareSerial.h>
#include <TinyGPS++.h>

// OLED setup
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// GPS setup
TinyGPSPlus gps;
SoftwareSerial gpsSerial(D3, D4);  // RX (D3), TX (D4)

// Wi-Fi credentials
const char* ssid = "yourSSID";  // Replace with your WiFi SSID
const char* password = "yourPASSWORD";  // Replace with your WiFi password

// N2YO API details
String apiKey = "NH74CL-F9XL2D-EU42SJ-5CZB";
String satID = "61791";  // Dragon CRS-31 satellite ID

// ESP8266WebServer instance
ESP8266WebServer server(80);

// Variables for GPS and satellite data
float myLat = -34.136005; // Replace with actual GPS latitude
float myLon = 18.422548; // Replace with actual GPS longitude
float satLatitude = 0.0, satLongitude = 0.0, distanceToSat = 0.0;

void setup() {
  Serial.begin(115200);
  gpsSerial.begin(9600);
  
  // Initialize OLED
  Wire.begin(D2, D1);
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
  //if (!display.begin(0x3C, SCREEN_WIDTH, SCREEN_HEIGHT)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println("Initializing...");
  display.display();

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("WiFi connected");
  display.println("WiFi Connected!");
  display.display();

  // Set up the webserver
  server.on("/", handleRoot);
  server.begin();
  Serial.println("Webserver started");

  // Fetch initial satellite data
  fetchSatelliteData();
}

void fetchSatelliteData() {
  if (WiFi.status() == WL_CONNECTED) {
    WiFiClientSecure client;
    client.setInsecure();  // Disable SSL verification
    HTTPClient http;

    String url = "https://api.n2yo.com/rest/v1/satellite/positions/" + satID + "/" + 
                 String(myLat, 6) + "/" + String(myLon, 6) + "/0/1/&apiKey=" + apiKey;
    http.begin(client, url);
    int httpResponseCode = http.GET();

    if (httpResponseCode > 0) {
      String payload = http.getString();
      Serial.println("API Response: " + payload);

      // Parse JSON data
      StaticJsonDocument<1024> doc;
      DeserializationError error = deserializeJson(doc, payload);
      if (!error) {
        satLatitude = doc["positions"][0]["satlatitude"];
        satLongitude = doc["positions"][0]["satlongitude"];
        distanceToSat = calculateDistance(myLat, myLon, satLatitude, satLongitude);

        // Update OLED
        display.clearDisplay();
        display.setCursor(0, 0);
        display.println("Dragon CRS-31");
        display.setCursor(0, 16);
        display.print("Lat: ");
        display.print(satLatitude, 2);
        display.setCursor(0, 28);
        display.print("Lon: ");
        display.print(satLongitude, 2);
        display.setCursor(0, 40);
        display.print("Dist: ");
        display.print(distanceToSat, 2);
        display.print(" km");
        display.display();
      } else {
        Serial.println("JSON Parsing Error");
      }
    } else {
      Serial.print("HTTP Error: ");
      Serial.println(httpResponseCode);
    }
    http.end();
  }
}

// Calculate distance between coordinates (Haversine formula)
float calculateDistance(float lat1, float lon1, float lat2, float lon2) {
  const float R = 6371.0;  // Radius of Earth in km
  float dLat = radians(lat2 - lat1);
  float dLon = radians(lon2 - lon1);
  float a = sin(dLat / 2) * sin(dLat / 2) +
            cos(radians(lat1)) * cos(radians(lat2)) *
            sin(dLon / 2) * sin(dLon / 2);
  float c = 2 * atan2(sqrt(a), sqrt(1 - a));
  return R * c;
}

// Web server handler
void handleRoot() {
  String html = "<!DOCTYPE html><html><head><title>Dragon CRS-31 Tracker</title></head><body>";
  html += "<h1>Dragon CRS-31 Tracker</h1>";
  html += "<h2>GPS Data:</h2>";
  html += "<p>Your Latitude: " + String(myLat, 6) + "</p>";
  html += "<p>Your Longitude: " + String(myLon, 6) + "</p>";
  html += "<h2>Satellite Data:</h2>";
  html += "<p>Satellite Latitude: " + String(satLatitude, 6) + "</p>";
  html += "<p>Satellite Longitude: " + String(satLongitude, 6) + "</p>";
  html += "<p>Distance to Satellite: " + String(distanceToSat, 2) + " km</p>";
  html += "<iframe width='600' height='450' style='border:0'"
          " loading='lazy' allowfullscreen"
          " src='https://www.openstreetmap.org/export/embed.html?bbox=" +
          String(myLon - 0.5) + "," + String(myLat - 0.5) + "," +
          String(myLon + 0.5) + "," + String(myLat + 0.5) +
          "&layer=mapnik'></iframe>";
  html += "</body></html>";

  server.send(200, "text/html", html);
}

void loop() {
  server.handleClient();
  fetchSatelliteData();
  delay(10000);  // Update every 10 seconds
}
